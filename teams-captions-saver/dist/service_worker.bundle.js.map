{"version":3,"file":"service_worker.bundle.js","mappings":"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","sources":["webpack://ms-teams-captions-saver/./teams-captions-saver/service_worker.js"],"sourcesContent":["// Service worker is a script that your browser runs in the background, separate from a web page, opening the door to features that don't need a web page \r\n// or user interaction.\r\n// Service worker script will be forcefully terminated after about 30 seconds of inactivity, and restarted when it's next needed.\r\n// https://stackoverflow.com/questions/66618136/persistent-service-worker-in-chrome-extension/66618269#66618269\r\n\r\n/**\r\n * MS Teams Captions Saver - Service Worker\r\n * Handles download and viewer tab creation for captured captions\r\n */\r\n\r\n/**\r\n * Converts transcript array to YAML-like text format\r\n * @param {Array} json - Array of transcript objects with Name, Text, Time properties\r\n * @returns {string} Formatted text string\r\n */\r\nfunction formatTranscripts(json) {\r\n    return json.map(entry => {\r\n        return `Name: ${entry.Name}\\nText: ${entry.Text}\\nTime: ${entry.Time}\\n----`;\r\n    }).join('\\n');\r\n}\r\n\r\n/**\r\n * Downloads transcripts as a text file\r\n * @param {string} meetingTitle - Title for the downloaded file\r\n * @param {Array} transcriptArray - Array of transcript objects\r\n */\r\nfunction saveTranscripts(meetingTitle, transcriptArray) {\r\n    try {\r\n        const formattedText = formatTranscripts(transcriptArray);\r\n        console.log('Downloading transcripts:', formattedText);\r\n\r\n        chrome.downloads.download({\r\n            url: 'data:text/plain;charset=utf-8,' + encodeURIComponent(formattedText),\r\n            filename: meetingTitle + \".txt\",\r\n            saveAs: true\r\n        });\r\n    } catch (error) {\r\n        console.error('Error saving transcripts:', error);\r\n    }\r\n}\r\n\r\n/**\r\n * Creates a new tab with formatted captions for viewing\r\n * @param {Array} transcriptArray - Array of transcript objects\r\n */\r\nfunction createViewerTab(transcriptArray) {\r\n    // Create a data URL containing the HTML content for viewing captions\r\n    const htmlContent = `\r\n        <!DOCTYPE html>\r\n        <html>\r\n        <head>\r\n            <title>MS Teams Captions Viewer</title>\r\n            <style>\r\n                body {\r\n                    font-family: Arial, sans-serif;\r\n                    line-height: 1.6;\r\n                    margin: 0;\r\n                    padding: 20px;\r\n                    background-color: #f5f5f5;\r\n                }\r\n                .container {\r\n                    max-width: 800px;\r\n                    margin: 0 auto;\r\n                    background-color: white;\r\n                    padding: 20px;\r\n                    border-radius: 5px;\r\n                    box-shadow: 0 2px 5px rgba(0,0,0,0.1);\r\n                }\r\n                h1 {\r\n                    color: #333;\r\n                    text-align: center;\r\n                }\r\n                .caption {\r\n                    border-bottom: 1px solid #eee;\r\n                    padding: 10px 0;\r\n                    margin-bottom: 10px;\r\n                }\r\n                .name {\r\n                    font-weight: bold;\r\n                    color: #0078d4;\r\n                }\r\n                .text {\r\n                    margin: 5px 0;\r\n                }\r\n                .time {\r\n                    color: #666;\r\n                    font-size: 0.85em;\r\n                }\r\n            </style>\r\n        </head>\r\n        <body>\r\n            <div class=\"container\">\r\n                <h1>MS Teams Captions</h1>\r\n                <div id=\"captions-container\">\r\n                    ${transcriptArray.map(item => `\r\n                        <div class=\"caption\">\r\n                            <div class=\"name\">${item.Name}</div>\r\n                            <div class=\"text\">${item.Text}</div>\r\n                            <div class=\"time\">${item.Time}</div>\r\n                        </div>\r\n                    `).join('')}\r\n                </div>\r\n            </div>\r\n        </body>\r\n        </html>\r\n    `;\r\n    \r\n    try {\r\n        // Create a new tab with the formatted HTML content\r\n        chrome.tabs.create({\r\n            url: 'data:text/html;charset=utf-8,' + encodeURIComponent(htmlContent)\r\n        });\r\n    } catch (error) {\r\n        console.error('Error creating viewer tab:', error);\r\n    }\r\n}\r\n\r\n/**\r\n * Message listener for communication with content script\r\n * Handles 'download_captions' and 'display_captions' messages\r\n */\r\nchrome.runtime.onMessage.addListener(function(message, sender, sendResponse) {\r\n    console.log(\"Service worker received message:\", message.message);\r\n    \r\n    try {\r\n        switch (message.message) {\r\n            case 'download_captions':\r\n                console.log('Processing download request for:', message.meetingTitle);\r\n                saveTranscripts(message.meetingTitle, message.transcriptArray);\r\n                break;\r\n\r\n            case 'display_captions':\r\n                console.log('Creating viewer tab for', message.transcriptArray.length, 'captions');\r\n                createViewerTab(message.transcriptArray);\r\n                break;\r\n\r\n            default:\r\n                console.warn('Unknown message type:', message.message);\r\n                break;\r\n        }\r\n    } catch (error) {\r\n        console.error('Error handling message:', error);\r\n    }\r\n});"],"names":["formatTranscripts","json","map","entry","Name","Text","Time","join","saveTranscripts","meetingTitle","transcriptArray","formattedText","console","log","chrome","downloads","download","url","encodeURIComponent","filename","saveAs","error","createViewerTab","htmlContent","item","tabs","create","runtime","onMessage","addListener","message","sender","sendResponse","length","warn"],"sourceRoot":""}