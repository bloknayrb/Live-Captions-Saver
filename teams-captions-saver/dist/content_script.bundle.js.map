{"version":3,"file":"content_script.bundle.js","mappings":"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","sources":["webpack://ms-teams-captions-saver/./teams-captions-saver/src/core/state-manager.js","webpack://ms-teams-captions-saver/./teams-captions-saver/src/core/meeting-detector.js","webpack://ms-teams-captions-saver/./teams-captions-saver/src/utils/dom-helpers.js","webpack://ms-teams-captions-saver/./teams-captions-saver/src/core/caption-capture.js","webpack://ms-teams-captions-saver/./teams-captions-saver/src/utils/text-processing.js","webpack://ms-teams-captions-saver/./teams-captions-saver/src/core/memory-manager.js","webpack://ms-teams-captions-saver/./teams-captions-saver/src/config/constants.js","webpack://ms-teams-captions-saver/webpack/bootstrap","webpack://ms-teams-captions-saver/./teams-captions-saver/src/content-script.js"],"sourcesContent":["/**\r\n * State management for caption processing\r\n */\r\n\r\nimport { TIMING } from '../config/constants.js';\r\n\r\nexport class StateManager {\r\n    constructor() {\r\n        // Processing state tracking\r\n        this.processingState = {\r\n            isProcessing: false,\r\n            isSilenceDetection: false,\r\n            isForceCapture: false,\r\n            lastSilenceDetectionReason: ''\r\n        };\r\n\r\n        // Performance monitoring\r\n        this.processingStats = { \r\n            runs: 0, \r\n            totalTime: 0, \r\n            throttledCalls: 0 \r\n        };\r\n\r\n        // Timing state\r\n        this.lastCaptionTime = 0;\r\n        this.lastProcessingTime = 0;\r\n        this.lastCaptionSnapshot = '';\r\n\r\n        // Timer references\r\n        this.silenceCheckTimer = null;\r\n        this.processingThrottle = null;\r\n        this.fallbackTimer = null;\r\n    }\r\n\r\n    /**\r\n     * Set processing state\r\n     */\r\n    setProcessingState(isProcessing) {\r\n        this.processingState.isProcessing = isProcessing;\r\n        if (isProcessing) {\r\n            console.log('🔄 Caption processing started');\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check if processing can start\r\n     */\r\n    canStartProcessing() {\r\n        return !this.processingState.isProcessing && !this.processingState.isSilenceDetection;\r\n    }\r\n\r\n    /**\r\n     * Centralized silence detection control\r\n     */\r\n    triggerSilenceDetection(reason = 'unknown', captionProcessor) {\r\n        try {\r\n            // Prevent overlapping silence detection operations\r\n            if (this.processingState.isSilenceDetection) {\r\n                console.log(`Silence detection already in progress, skipping: ${reason}`);\r\n                return false;\r\n            }\r\n\r\n            // Prevent interference with ongoing processing\r\n            if (this.processingState.isProcessing) {\r\n                console.log(`Caption processing active, deferring silence detection: ${reason}`);\r\n                setTimeout(() => this.triggerSilenceDetection(reason, captionProcessor), TIMING.DEFER_RETRY_DELAY);\r\n                return false;\r\n            }\r\n\r\n            this.processingState.isSilenceDetection = true;\r\n            this.processingState.lastSilenceDetectionReason = reason;\r\n            \r\n            console.log(`🔕 Triggering silence detection: ${reason}`);\r\n\r\n            // Set artificial timing state for silence detection\r\n            const originalTime = this.lastCaptionTime;\r\n            this.lastCaptionTime = Date.now() - (TIMING.SILENCE_TIMEOUT + 1000);\r\n\r\n            // Execute silence detection\r\n            const result = captionProcessor.checkRecentCaptions();\r\n\r\n            // Restore original timing state if not naturally updated\r\n            if (this.lastCaptionTime === Date.now() - (TIMING.SILENCE_TIMEOUT + 1000)) {\r\n                this.lastCaptionTime = originalTime;\r\n            }\r\n\r\n            this.processingState.isSilenceDetection = false;\r\n            console.log(`✅ Silence detection completed: ${reason}`);\r\n            \r\n            return result;\r\n        } catch (error) {\r\n            this.processingState.isSilenceDetection = false;\r\n            console.error(`Error in silence detection (${reason}):`, error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cleanup all timers\r\n     */\r\n    cleanupAllTimers() {\r\n        try {\r\n            if (this.silenceCheckTimer) {\r\n                clearTimeout(this.silenceCheckTimer);\r\n                this.silenceCheckTimer = null;\r\n            }\r\n            if (this.processingThrottle) {\r\n                clearTimeout(this.processingThrottle);\r\n                this.processingThrottle = null;\r\n            }\r\n            if (this.fallbackTimer) {\r\n                clearInterval(this.fallbackTimer);\r\n                this.fallbackTimer = null;\r\n            }\r\n            console.log('All timers cleaned up');\r\n        } catch (error) {\r\n            console.warn('Error during timer cleanup:', error);\r\n        }\r\n    }\r\n}","/**\r\n * Meeting state detection with caching\r\n */\r\n\r\nimport { TIMING, SELECTORS } from '../config/constants.js';\r\nimport { DOMHelpers } from '../utils/dom-helpers.js';\r\n\r\nexport class MeetingDetector {\r\n    constructor() {\r\n        // Meeting detection cache\r\n        this.meetingDetectionCache = { \r\n            result: false, \r\n            timestamp: 0 \r\n        };\r\n    }\r\n\r\n    /**\r\n     * Optimized meeting detection with caching\r\n     */\r\n    detectMeetingState() {\r\n        const now = Date.now();\r\n        \r\n        // Use cached result if still valid\r\n        if (now - this.meetingDetectionCache.timestamp < TIMING.MEETING_CACHE_DURATION) {\r\n            return this.meetingDetectionCache.result;\r\n        }\r\n        \r\n        try {\r\n            // Check specific, efficient indicators first\r\n            const quickIndicators = [\r\n                document.getElementById(SELECTORS.MEETING_INDICATORS.CALL_DURATION.slice(1)),\r\n                DOMHelpers.safeQuerySelector(document, SELECTORS.MEETING_INDICATORS.CALL_STATUS_CONTAINER),\r\n                DOMHelpers.safeQuerySelector(document, SELECTORS.MEETING_INDICATORS.CALL_STATUS)\r\n            ];\r\n            \r\n            let inMeeting = quickIndicators.some(indicator => indicator !== null);\r\n            \r\n            // Only do expensive span query if quick checks fail\r\n            if (!inMeeting) {\r\n                const waitingSpans = DOMHelpers.safeQuerySelectorAll('span[class*=\"waiting\"], span[class*=\"join\"]');\r\n                inMeeting = Array.from(waitingSpans).some(el => {\r\n                    const text = DOMHelpers.safeExtractText(el);\r\n                    return text && text.includes(\"Waiting for others to join\");\r\n                });\r\n            }\r\n            \r\n            // Cache the result\r\n            this.meetingDetectionCache.result = inMeeting;\r\n            this.meetingDetectionCache.timestamp = now;\r\n            \r\n            return inMeeting;\r\n        } catch (error) {\r\n            console.warn('Error in meeting detection:', error);\r\n            return this.meetingDetectionCache.result; // Return last known state\r\n        }\r\n    }\r\n}","/**\r\n * DOM utility functions for safe DOM operations\r\n */\r\n\r\nimport { SELECTORS } from '../config/constants.js';\r\n\r\nexport class DOMHelpers {\r\n    /**\r\n     * Safe DOM query selector\r\n     */\r\n    static safeQuerySelector(element, selector) {\r\n        try {\r\n            return element ? element.querySelector(selector) : null;\r\n        } catch (error) {\r\n            console.warn(`Safe query selector failed for \"${selector}\":`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Safe DOM query selector all\r\n     */\r\n    static safeQuerySelectorAll(selector) {\r\n        try {\r\n            return document.querySelectorAll(selector) || [];\r\n        } catch (error) {\r\n            console.warn(`Safe query selector all failed for \"${selector}\":`, error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Safe text extraction\r\n     */\r\n    static safeExtractText(element) {\r\n        try {\r\n            if (!element) return '';\r\n            return (element.innerText || element.textContent || '').trim();\r\n        } catch (error) {\r\n            console.warn('Safe text extraction failed:', error);\r\n            return '';\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Safe closest element search\r\n     */\r\n    static safeClosest(element, selector) {\r\n        try {\r\n            return element ? element.closest(selector) : null;\r\n        } catch (error) {\r\n            console.warn(`Safe closest failed for \"${selector}\":`, error);\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Get caption elements with fallback selectors\r\n     */\r\n    static getCaptionElements() {\r\n        try {\r\n            // Primary selector\r\n            let captionTextElements = this.safeQuerySelectorAll(SELECTORS.PRIMARY_CAPTION);\r\n            \r\n            // Fallback selectors if primary doesn't work\r\n            if (captionTextElements.length === 0) {\r\n                for (const selector of SELECTORS.FALLBACK_CAPTIONS) {\r\n                    captionTextElements = this.safeQuerySelectorAll(selector);\r\n                    if (captionTextElements.length > 0) {\r\n                        console.log(`Using fallback caption selector: ${selector}`);\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return captionTextElements;\r\n        } catch (error) {\r\n            console.error('Error in getCaptionElements:', error);\r\n            return [];\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Extract caption data with fallback strategies\r\n     */\r\n    static extractCaptionData(textElement) {\r\n        try {\r\n            const result = {\r\n                text: '',\r\n                name: 'Unknown Speaker',\r\n                element: textElement\r\n            };\r\n            \r\n            // Primary text extraction with normalization\r\n            const rawText = this.safeExtractText(textElement);\r\n            result.text = rawText; // Will be normalized by TextProcessor\r\n            if (!result.text) return null;\r\n            \r\n            // Primary author extraction strategy\r\n            const transcript = this.safeClosest(textElement, SELECTORS.CHAT_MESSAGE);\r\n            if (transcript) {\r\n                const authorElement = this.safeQuerySelector(transcript, SELECTORS.AUTHOR);\r\n                if (authorElement) {\r\n                    result.name = this.safeExtractText(authorElement);\r\n                }\r\n            }\r\n            \r\n            // Fallback author extraction strategies\r\n            if (result.name === 'Unknown Speaker') {\r\n                const fallbackSelectors = [\r\n                    '[data-tid=\"author\"]',\r\n                    '.fui-ChatMessageAuthor',\r\n                    '[class*=\"author\"]',\r\n                    '[class*=\"Author\"]',\r\n                    '[class*=\"name\"]',\r\n                    '[class*=\"Name\"]'\r\n                ];\r\n                \r\n                for (const selector of fallbackSelectors) {\r\n                    const chatMessage = this.safeClosest(textElement, '[class*=\"ChatMessage\"]');\r\n                    const authorEl = this.safeQuerySelector(chatMessage, selector) ||\r\n                                   this.safeQuerySelector(textElement.parentElement, selector) ||\r\n                                   this.safeQuerySelector(textElement.parentElement?.parentElement, selector);\r\n                    \r\n                    if (authorEl) {\r\n                        const authorText = this.safeExtractText(authorEl);\r\n                        if (authorText && authorText !== result.text) {\r\n                            result.name = authorText;\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return result;\r\n        } catch (error) {\r\n            console.error('Error in extractCaptionData:', error);\r\n            return null;\r\n        }\r\n    }\r\n}","/**\r\n * Core caption capture and processing logic\r\n */\r\n\r\nimport { TIMING, MEMORY, SIMILARITY_THRESHOLDS } from '../config/constants.js';\r\nimport { DOMHelpers } from '../utils/dom-helpers.js';\r\nimport { TextProcessor } from '../utils/text-processing.js';\r\n\r\nexport class CaptionCapture {\r\n    constructor(stateManager, memoryManager) {\r\n        this.stateManager = stateManager;\r\n        this.memoryManager = memoryManager;\r\n        this.transcriptArray = [];\r\n        this.transcriptIdCounter = 0;\r\n    }\r\n\r\n    /**\r\n     * Process caption updates and handle live caption changes\r\n     */\r\n    processCaptionUpdate(captionData, elementIndex) {\r\n        try {\r\n            const { text, name } = captionData;\r\n            \r\n            // Create tracking key based on element position and speaker\r\n            const trackingKey = `${elementIndex}:${name}`;\r\n            \r\n            // Check if we've seen this element position before\r\n            const previousData = this.memoryManager.captionElementTracking.get(trackingKey);\r\n            \r\n            if (previousData) {\r\n                // This is potentially an update to an existing caption\r\n                const previousText = previousData.text;\r\n                \r\n                // Check if current text is an extension/correction of previous text using similarity\r\n                const similarity = TextProcessor.calculateTextSimilarity(text, previousText);\r\n                const isUpdate = (text.length > previousText.length && similarity > SIMILARITY_THRESHOLDS.UPDATE_DETECTION) || \r\n                                (similarity > SIMILARITY_THRESHOLDS.HIGH_SIMILARITY);\r\n                \r\n                if (isUpdate) {\r\n                    console.log(`Caption update detected (similarity: ${similarity.toFixed(2)}): \"${previousText}\" -> \"${text}\"`);\r\n                    \r\n                    // Remove the previous version from processed set and transcript array\r\n                    const oldCaptionKey = TextProcessor.createCaptionKey(name, previousText);\r\n                    this.memoryManager.processedCaptions.delete(oldCaptionKey);\r\n                    \r\n                    // Remove old version from transcript array\r\n                    const oldIndex = this.transcriptArray.findIndex(item => \r\n                        item.Name === name && item.Text === previousText && item.ID === oldCaptionKey\r\n                    );\r\n                    if (oldIndex !== -1) {\r\n                        this.transcriptArray.splice(oldIndex, 1);\r\n                        console.log(`Removed old version from transcript: \"${previousText}\"`);\r\n                    }\r\n                }\r\n            }\r\n            \r\n            // Update tracking data with current caption\r\n            this.memoryManager.captionElementTracking.set(trackingKey, {\r\n                text: text,\r\n                timestamp: Date.now(),\r\n                processed: false\r\n            });\r\n            \r\n            return true;\r\n        } catch (error) {\r\n            console.error('Error in processCaptionUpdate:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Enhanced duplicate detection with fuzzy matching\r\n     */\r\n    isDuplicateCaption(name, text) {\r\n        try {\r\n            const captionKey = TextProcessor.createCaptionKey(name, text);\r\n            \r\n            // First check exact match\r\n            if (this.memoryManager.processedCaptions.has(captionKey)) {\r\n                return true;\r\n            }\r\n            \r\n            // Check for similar captions in recent transcript\r\n            const recentTranscripts = this.transcriptArray.slice(-MEMORY.RECENT_TRANSCRIPTS_LIMIT);\r\n            \r\n            for (const transcript of recentTranscripts) {\r\n                if (transcript.Name === name) {\r\n                    const similarity = TextProcessor.calculateTextSimilarity(text, transcript.Text);\r\n                    if (similarity > SIMILARITY_THRESHOLDS.DUPLICATE_DETECTION) {\r\n                        console.log(`Fuzzy duplicate detected (similarity: ${similarity.toFixed(2)}): \"${transcript.Text}\" ≈ \"${text}\"`);\r\n                        return true;\r\n                    }\r\n                }\r\n            }\r\n            \r\n            return false;\r\n        } catch (error) {\r\n            console.error('Error in isDuplicateCaption:', error);\r\n            return false;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Main caption processing function\r\n     */\r\n    checkCaptions() {\r\n        try {\r\n            // Get all caption text elements using centralized function\r\n            const captionTextElements = DOMHelpers.getCaptionElements();\r\n            \r\n            // Create a snapshot of current caption content to detect real changes\r\n            if (captionTextElements.length > 0) {\r\n                const currentSnapshot = Array.from(captionTextElements).map(el => DOMHelpers.safeExtractText(el)).join('|');\r\n                \r\n                // Only update timing if the content actually changed\r\n                if (currentSnapshot !== this.stateManager.lastCaptionSnapshot) {\r\n                    this.stateManager.lastCaptionSnapshot = currentSnapshot;\r\n                    this.stateManager.lastCaptionTime = Date.now();\r\n                    \r\n                    console.log('Caption content changed, resetting silence timer');\r\n                    \r\n                    // Reset the silence check timer\r\n                    if (this.stateManager.silenceCheckTimer) {\r\n                        clearTimeout(this.stateManager.silenceCheckTimer);\r\n                    }\r\n                    \r\n                    // Set a timer to check for recent captions after configured silence timeout\r\n                    this.stateManager.silenceCheckTimer = setTimeout(() => {\r\n                        this.checkRecentCaptions();\r\n                    }, TIMING.SILENCE_TIMEOUT);\r\n                }\r\n            }\r\n            \r\n            // Use configurable thresholds for better caption capture\r\n            if (captionTextElements.length < MEMORY.MIN_CAPTIONS_REQUIRED) {\r\n                console.log(`Only ${captionTextElements.length} captions, need at least ${MEMORY.MIN_CAPTIONS_REQUIRED} for stable processing`);\r\n                return;\r\n            }\r\n            \r\n            const numStableElements = Math.max(1, captionTextElements.length - MEMORY.STABILITY_BUFFER);\r\n            \r\n            for (let i = 0; i < numStableElements; i++) {\r\n                const textElement = captionTextElements[i];\r\n                \r\n                // Use helper function with fallback strategies\r\n                const captionData = DOMHelpers.extractCaptionData(textElement);\r\n                if (!captionData) continue;\r\n                \r\n                const { text: Text, name: Name } = captionData;\r\n                const normalizedText = TextProcessor.normalizeText(Text);\r\n                \r\n                // Process caption update detection\r\n                const shouldProcess = this.processCaptionUpdate({...captionData, text: normalizedText}, i);\r\n                if (!shouldProcess) continue;\r\n                \r\n                // Enhanced duplicate detection with fuzzy matching\r\n                if (this.isDuplicateCaption(Name, normalizedText)) {\r\n                    continue;\r\n                }\r\n                \r\n                // Create a unique key using consistent helper function\r\n                const captionKey = TextProcessor.createCaptionKey(Name, normalizedText);\r\n                \r\n                // Mark as processed\r\n                this.memoryManager.processedCaptions.add(captionKey);\r\n                \r\n                // Add to transcript array\r\n                const Time = new Date().toLocaleTimeString();\r\n                const newCaption = {\r\n                    Name,\r\n                    Text: normalizedText,\r\n                    Time,\r\n                    ID: captionKey\r\n                };\r\n                \r\n                this.transcriptArray.push(newCaption);\r\n                console.log('FINAL STABLE CAPTION:', newCaption);\r\n            }\r\n        } catch (error) {\r\n            console.error('Error in checkCaptions:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Check recent captions during silence periods\r\n     */\r\n    checkRecentCaptions() {\r\n        try {\r\n            console.log('checkRecentCaptions called - checking for silence-based captions');\r\n            \r\n            const captionTextElements = DOMHelpers.getCaptionElements();\r\n            \r\n            if (captionTextElements.length === 0) {\r\n                console.log('No caption elements found for silence check');\r\n                return;\r\n            }\r\n            \r\n            console.log(`Found ${captionTextElements.length} caption elements for silence check`);\r\n            \r\n            const timeSinceLastCaption = Date.now() - this.stateManager.lastCaptionTime;\r\n            console.log(`Time since last caption: ${timeSinceLastCaption}ms`);\r\n            \r\n            if (timeSinceLastCaption >= TIMING.SILENCE_TIMER_OFFSET) {\r\n                console.log('Processing recent captions due to silence...');\r\n                \r\n                const startIndex = Math.max(0, captionTextElements.length - MEMORY.STABILITY_BUFFER); \r\n                let endIndex = captionTextElements.length - 1;\r\n                \r\n                // Check if the last caption looks complete (ends with punctuation)\r\n                if (captionTextElements.length > 0) {\r\n                    const lastElement = captionTextElements[captionTextElements.length - 1];\r\n                    const lastText = DOMHelpers.safeExtractText(lastElement);\r\n                    if (lastText.match(/[.!?]$/)) {\r\n                        console.log('Last caption ends with punctuation, including it:', lastText);\r\n                        endIndex = captionTextElements.length;\r\n                    }\r\n                }\r\n                \r\n                console.log(`Processing captions from index ${startIndex} to ${endIndex - 1}`);\r\n                \r\n                for (let i = startIndex; i < endIndex; i++) {\r\n                    const textElement = captionTextElements[i];\r\n                    \r\n                    const captionData = DOMHelpers.extractCaptionData(textElement);\r\n                    if (!captionData) continue;\r\n                    \r\n                    const { text: Text, name: Name } = captionData;\r\n                    const normalizedText = TextProcessor.normalizeText(Text);\r\n                    \r\n                    // Process caption update detection for silence-based captions\r\n                    const shouldProcess = this.processCaptionUpdate({...captionData, text: normalizedText}, i);\r\n                    if (!shouldProcess) continue;\r\n                    \r\n                    // Enhanced duplicate detection with fuzzy matching\r\n                    if (this.isDuplicateCaption(Name, normalizedText)) {\r\n                        console.log(`Skipping duplicate silence caption: ${normalizedText}`);\r\n                        continue;\r\n                    }\r\n                    \r\n                    const captionKey = TextProcessor.createCaptionKey(Name, normalizedText);\r\n                    \r\n                    // Mark as processed\r\n                    this.memoryManager.processedCaptions.add(captionKey);\r\n                    \r\n                    // Add to transcript array\r\n                    const Time = new Date().toLocaleTimeString();\r\n                    const newCaption = {\r\n                        Name,\r\n                        Text: normalizedText,\r\n                        Time,\r\n                        ID: captionKey\r\n                    };\r\n                    \r\n                    this.transcriptArray.push(newCaption);\r\n                    console.log('SILENCE-DETECTED STABLE CAPTION:', newCaption);\r\n                }\r\n            } else {\r\n                console.log('Not enough silence time elapsed');\r\n            }\r\n        } catch (error) {\r\n            console.error('Error in checkRecentCaptions:', error);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Debounced caption processing to prevent excessive processing\r\n     */\r\n    debouncedCheckCaptions() {\r\n        const now = Date.now();\r\n        \r\n        // Check if we can start processing\r\n        if (!this.stateManager.canStartProcessing()) {\r\n            console.log('Processing blocked by active operations');\r\n            return;\r\n        }\r\n        \r\n        // Clear existing throttle timer\r\n        if (this.stateManager.processingThrottle) {\r\n            clearTimeout(this.stateManager.processingThrottle);\r\n        }\r\n        \r\n        // If we processed recently, delay this run\r\n        const timeSinceLastProcessing = now - this.stateManager.lastProcessingTime;\r\n        if (timeSinceLastProcessing < TIMING.DEBOUNCE_INTERVAL) {\r\n            this.stateManager.processingStats.throttledCalls++;\r\n            this.stateManager.processingThrottle = setTimeout(() => {\r\n                if (this.stateManager.canStartProcessing()) {\r\n                    this.stateManager.lastProcessingTime = Date.now();\r\n                    this.stateManager.setProcessingState(true);\r\n                    const startTime = performance.now();\r\n                    this.checkCaptions();\r\n                    const endTime = performance.now();\r\n                    this.stateManager.processingStats.runs++;\r\n                    this.stateManager.processingStats.totalTime += (endTime - startTime);\r\n                    this.stateManager.setProcessingState(false);\r\n                }\r\n            }, TIMING.DEBOUNCE_INTERVAL - timeSinceLastProcessing);\r\n            return;\r\n        }\r\n        \r\n        // Process immediately\r\n        this.stateManager.lastProcessingTime = now;\r\n        this.stateManager.setProcessingState(true);\r\n        const startTime = performance.now();\r\n        this.checkCaptions();\r\n        const endTime = performance.now();\r\n        this.stateManager.processingStats.runs++;\r\n        this.stateManager.processingStats.totalTime += (endTime - startTime);\r\n        this.stateManager.setProcessingState(false);\r\n    }\r\n\r\n    /**\r\n     * Sort transcripts by screen order\r\n     */\r\n    sortTranscriptsByScreenOrder() {\r\n        try {\r\n            // Get the current order of captions as they appear on screen\r\n            const captionTextElements = DOMHelpers.getCaptionElements();\r\n            const screenOrder = [];\r\n            \r\n            captionTextElements.forEach((element, index) => {\r\n                const captionData = DOMHelpers.extractCaptionData(element);\r\n                if (captionData) {\r\n                    screenOrder.push({\r\n                        text: TextProcessor.normalizeText(captionData.text),\r\n                        name: captionData.name,\r\n                        screenPosition: index\r\n                    });\r\n                }\r\n            });\r\n            \r\n            // Create a map for quick lookup of screen positions using consistent keys\r\n            const positionMap = new Map();\r\n            screenOrder.forEach(item => {\r\n                const key = TextProcessor.createCaptionKey(item.name, item.text);\r\n                positionMap.set(key, item.screenPosition);\r\n            });\r\n            \r\n            // Sort transcriptArray based on screen order\r\n            const orderedTranscripts = [...this.transcriptArray].sort((a, b) => {\r\n                const keyA = TextProcessor.createCaptionKey(a.Name, a.Text);\r\n                const keyB = TextProcessor.createCaptionKey(b.Name, b.Text);\r\n                \r\n                const posA = positionMap.get(keyA);\r\n                const posB = positionMap.get(keyB);\r\n                \r\n                // If both have screen positions, sort by screen order\r\n                if (posA !== undefined && posB !== undefined) {\r\n                    return posA - posB;\r\n                }\r\n                \r\n                // If only one has a screen position, put it first\r\n                if (posA !== undefined) return -1;\r\n                if (posB !== undefined) return 1;\r\n                \r\n                // If neither has a screen position, maintain original order\r\n                return 0;\r\n            });\r\n            \r\n            console.log(\"Sorted transcripts by screen order:\", orderedTranscripts);\r\n            return orderedTranscripts;\r\n        } catch (error) {\r\n            console.error('Error in sortTranscriptsByScreenOrder:', error);\r\n            return this.transcriptArray;\r\n        }\r\n    }\r\n}","/**\r\n * Text processing utilities for caption normalization and similarity detection\r\n */\r\n\r\nimport { PERFORMANCE } from '../config/constants.js';\r\n\r\nexport class TextProcessor {\r\n    /**\r\n     * Comprehensive text cleaning and normalization\r\n     */\r\n    static normalizeText(text) {\r\n        if (!text) return '';\r\n        \r\n        let cleaned = text;\r\n        \r\n        // Remove HTML entities\r\n        cleaned = cleaned.replace(/&[a-zA-Z0-9#]+;/g, ' ');\r\n        \r\n        // Remove extra whitespace (multiple spaces, tabs, newlines)\r\n        cleaned = cleaned.replace(/\\s+/g, ' ');\r\n        \r\n        // Remove common Teams UI artifacts and typing indicators\r\n        cleaned = cleaned.replace(/\\.\\.\\./g, ''); // Remove ellipsis/typing indicators\r\n        cleaned = cleaned.replace(/^\\s*[.\\-*><|~+=]+\\s*/g, ''); // Remove leading symbols\r\n        cleaned = cleaned.replace(/\\s*[.\\-*><|~+=]+\\s*$/g, ''); // Remove trailing symbols\r\n        \r\n        // Remove common UI noise\r\n        cleaned = cleaned.replace(/\\[.*?\\]/g, ''); // Remove bracketed content\r\n        cleaned = cleaned.replace(/\\(typing\\)/gi, ''); // Remove typing indicators\r\n        cleaned = cleaned.replace(/\\(speaking\\)/gi, ''); // Remove speaking indicators\r\n        \r\n        // Normalize punctuation spacing\r\n        cleaned = cleaned.replace(/\\s*([,.!?;:])\\s*/g, '$1 ');\r\n        \r\n        // Final cleanup\r\n        cleaned = cleaned.trim();\r\n        \r\n        return cleaned;\r\n    }\r\n\r\n    /**\r\n     * Calculate text similarity for fuzzy duplicate detection\r\n     */\r\n    static calculateTextSimilarity(text1, text2) {\r\n        try {\r\n            if (!text1 || !text2) return 0;\r\n            \r\n            const norm1 = this.normalizeText(text1).toLowerCase();\r\n            const norm2 = this.normalizeText(text2).toLowerCase();\r\n            \r\n            if (norm1 === norm2) return 1;\r\n            \r\n            // Check if one text contains the other (for progressive updates)\r\n            if (norm1.includes(norm2) || norm2.includes(norm1)) {\r\n                const shorter = norm1.length < norm2.length ? norm1 : norm2;\r\n                const longer = norm1.length >= norm2.length ? norm1 : norm2;\r\n                return shorter.length / longer.length;\r\n            }\r\n            \r\n            // Simple word-based similarity for different approaches to same content\r\n            const words1 = norm1.split(/\\s+/).filter(w => w.length > PERFORMANCE.MAX_WORD_LENGTH_FILTER);\r\n            const words2 = norm2.split(/\\s+/).filter(w => w.length > PERFORMANCE.MAX_WORD_LENGTH_FILTER);\r\n            \r\n            if (words1.length === 0 || words2.length === 0) return 0;\r\n            \r\n            const commonWords = words1.filter(w => words2.includes(w)).length;\r\n            const totalWords = Math.max(words1.length, words2.length);\r\n            \r\n            return commonWords / totalWords;\r\n        } catch (error) {\r\n            console.warn('Error calculating text similarity:', error);\r\n            return 0;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create consistent caption keys\r\n     */\r\n    static createCaptionKey(name, text) {\r\n        const normalizedName = name ? name.trim() : 'Unknown Speaker';\r\n        const normalizedText = this.normalizeText(text);\r\n        return `${normalizedName}:${normalizedText}`;\r\n    }\r\n}","/**\r\n * Memory management for caption tracking and cleanup\r\n */\r\n\r\nimport { MEMORY } from '../config/constants.js';\r\n\r\nexport class MemoryManager {\r\n    constructor() {\r\n        // Caption tracking data\r\n        this.captionElementTracking = new Map();\r\n        this.processedCaptions = new Set();\r\n    }\r\n\r\n    /**\r\n     * Cleanup tracking data while preserving full transcript\r\n     */\r\n    cleanupMemory(transcriptArray, processingState) {\r\n        // Don't run cleanup during active processing to avoid interference\r\n        if (processingState.isProcessing || processingState.isSilenceDetection) {\r\n            console.log('Deferring memory cleanup due to active operations');\r\n            return;\r\n        }\r\n\r\n        const now = Date.now();\r\n        \r\n        // Clean up old caption element tracking data\r\n        let removedTracking = 0;\r\n        for (const [key, data] of this.captionElementTracking.entries()) {\r\n            if (now - data.timestamp > MEMORY.TRACKING_DATA_MAX_AGE) {\r\n                this.captionElementTracking.delete(key);\r\n                removedTracking++;\r\n            }\r\n        }\r\n        \r\n        // If still too many entries, remove oldest ones\r\n        if (this.captionElementTracking.size > MEMORY.MAX_TRACKING_ENTRIES) {\r\n            const entries = Array.from(this.captionElementTracking.entries());\r\n            entries.sort((a, b) => a[1].timestamp - b[1].timestamp);\r\n            \r\n            const toRemove = entries.slice(0, this.captionElementTracking.size - MEMORY.MAX_TRACKING_ENTRIES);\r\n            for (const [key] of toRemove) {\r\n                this.captionElementTracking.delete(key);\r\n                removedTracking++;\r\n            }\r\n        }\r\n        \r\n        // Clean up processed captions set (keep only recent ones referenced in transcript)\r\n        const transcriptKeys = new Set(transcriptArray.map(item => item.ID));\r\n        let removedProcessed = 0;\r\n        for (const key of this.processedCaptions) {\r\n            if (!transcriptKeys.has(key)) {\r\n                this.processedCaptions.delete(key);\r\n                removedProcessed++;\r\n            }\r\n        }\r\n        \r\n        if (removedTracking > 0 || removedProcessed > 0) {\r\n            console.log(`Memory cleanup: removed ${removedTracking} tracking entries, ${removedProcessed} processed caption entries`);\r\n            console.log(`Current memory usage: ${this.captionElementTracking.size} tracking entries, ${this.processedCaptions.size} processed captions, ${transcriptArray.length} transcript entries`);\r\n        }\r\n    }\r\n}","/**\r\n * Configuration constants for MS Teams Caption Saver\r\n */\r\n\r\nexport const SIMILARITY_THRESHOLDS = {\r\n    UPDATE_DETECTION: 0.7,      // Minimum similarity to consider caption an update\r\n    HIGH_SIMILARITY: 0.85,      // High similarity threshold for updates\r\n    DUPLICATE_DETECTION: 0.9    // Very high similarity for duplicate detection\r\n};\r\n\r\nexport const TIMING = {\r\n    DEBOUNCE_INTERVAL: 500,           // Minimum ms between processing runs\r\n    SILENCE_TIMEOUT: 5000,            // Ms to wait before considering silence\r\n    SILENCE_TIMER_OFFSET: 4500,       // Slightly less than silence timeout\r\n    MEMORY_CLEANUP_INTERVAL: 60000,   // Memory cleanup frequency (60 seconds)\r\n    FALLBACK_TIMER_INTERVAL: 3000,    // Fallback processing check interval\r\n    PERIODIC_CHECK_INTERVAL: 1000,    // Periodic silence check interval\r\n    DEFER_RETRY_DELAY: 1000,          // Delay for deferred operations\r\n    MEETING_CACHE_DURATION: 30000     // Meeting detection cache duration\r\n};\r\n\r\nexport const MEMORY = {\r\n    MAX_TRACKING_ENTRIES: 1000,     // Maximum caption tracking entries\r\n    TRACKING_DATA_MAX_AGE: 300000,  // 5 minutes for tracking data\r\n    RECENT_TRANSCRIPTS_LIMIT: 20,   // Number of recent transcripts to check for duplicates\r\n    STABILITY_BUFFER: 2,            // Number of recent captions to skip for stability\r\n    MIN_CAPTIONS_REQUIRED: 3        // Minimum captions needed before processing\r\n};\r\n\r\nexport const PERFORMANCE = {\r\n    MAX_WORD_LENGTH_FILTER: 2,      // Minimum word length for similarity comparison\r\n    PERFORMANCE_LOG_FREQUENCY: 60   // How often to log performance stats (cleanup cycles)\r\n};\r\n\r\nexport const SELECTORS = {\r\n    PRIMARY_CAPTION: '[data-tid=\"closed-caption-text\"]',\r\n    CAPTIONS_CONTAINER: '[data-tid=\"closed-captions-renderer\"]',\r\n    CHAT_MESSAGE: '.fui-ChatMessageCompact',\r\n    AUTHOR: '[data-tid=\"author\"]',\r\n    FALLBACK_CAPTIONS: [\r\n        '[class*=\"closed-caption\"]',\r\n        '[class*=\"caption-text\"]',\r\n        '[class*=\"CaptionText\"]',\r\n        '[aria-label*=\"caption\"]',\r\n        '[role=\"log\"] [class*=\"text\"]'\r\n    ],\r\n    MEETING_INDICATORS: {\r\n        CALL_DURATION: '#call-duration-custom',\r\n        CALL_STATUS_CONTAINER: '[data-tid=\"call-status-container-test-id\"]',\r\n        CALL_STATUS: '#call-status'\r\n    }\r\n};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","/**\r\n * MS Teams Caption Saver - Modular Content Script\r\n * Main entry point for the Chrome extension content script\r\n */\r\n\r\nimport { TIMING, SELECTORS } from './config/constants.js';\r\nimport { DOMHelpers } from './utils/dom-helpers.js';\r\nimport { StateManager } from './core/state-manager.js';\r\nimport { MemoryManager } from './core/memory-manager.js';\r\nimport { CaptionCapture } from './core/caption-capture.js';\r\nimport { MeetingDetector } from './core/meeting-detector.js';\r\n\r\nclass TeamsaptionSaver {\r\n    constructor() {\r\n        this.stateManager = new StateManager();\r\n        this.memoryManager = new MemoryManager();\r\n        this.meetingDetector = new MeetingDetector();\r\n        this.captionCapture = new CaptionCapture(this.stateManager, this.memoryManager);\r\n        \r\n        this.capturing = false;\r\n        this.observer = null;\r\n        this.periodicCheckCounter = 0;\r\n    }\r\n\r\n    /**\r\n     * Initialize periodic checks\r\n     */\r\n    initializePeriodicChecks() {\r\n        setInterval(() => {\r\n            this.periodicCheckCounter++;\r\n            \r\n            if (this.stateManager.lastCaptionTime === 0) {\r\n                return; // No captions processed yet\r\n            }\r\n            \r\n            const timeSinceLastCaption = Date.now() - this.stateManager.lastCaptionTime;\r\n            if (timeSinceLastCaption >= TIMING.SILENCE_TIMEOUT && \r\n                timeSinceLastCaption <= (TIMING.SILENCE_TIMEOUT + 1000)) {\r\n                console.log('Periodic silence check triggered');\r\n                this.stateManager.triggerSilenceDetection('periodic-check', this.captionCapture);\r\n            }\r\n            \r\n            // Run memory cleanup every configured interval\r\n            if (this.periodicCheckCounter % (TIMING.MEMORY_CLEANUP_INTERVAL / TIMING.PERIODIC_CHECK_INTERVAL) === 0) {\r\n                this.memoryManager.cleanupMemory(this.captionCapture.transcriptArray, this.stateManager.processingState);\r\n                \r\n                // Log performance stats\r\n                const stats = this.stateManager.processingStats;\r\n                if (stats.runs > 0) {\r\n                    const avgProcessingTime = (stats.totalTime / stats.runs).toFixed(2);\r\n                    console.log(`Performance stats: ${stats.runs} processing runs, ${avgProcessingTime}ms avg, ${stats.throttledCalls} throttled calls`);\r\n                }\r\n            }\r\n        }, TIMING.PERIODIC_CHECK_INTERVAL);\r\n    }\r\n\r\n    /**\r\n     * Start transcription system\r\n     */\r\n    startTranscription() {\r\n        const inMeeting = this.meetingDetector.detectMeetingState();\r\n        \r\n        if (!inMeeting) {\r\n            setTimeout(() => this.startTranscription(), 5000);\r\n            return false;\r\n        }\r\n\r\n        const closedCaptionsContainer = DOMHelpers.safeQuerySelector(document, SELECTORS.CAPTIONS_CONTAINER);\r\n        if (!closedCaptionsContainer) {\r\n            console.log(\"Please, click 'More' > 'Language and speech' > 'Turn on live captions'\");\r\n            setTimeout(() => this.startTranscription(), 5000);\r\n            return false;\r\n        }\r\n\r\n        console.log(\"Found captions container, setting up observer...\");\r\n        \r\n        // Clean up any existing timers/observers before setting up new ones\r\n        this.stateManager.cleanupAllTimers();\r\n        if (this.observer) {\r\n            this.observer.disconnect();\r\n        }\r\n        \r\n        this.capturing = true;\r\n        this.observer = new MutationObserver((mutations) => {\r\n            console.log('MutationObserver fired with', mutations.length, 'mutations');\r\n            this.captionCapture.debouncedCheckCaptions();\r\n        });\r\n        \r\n        this.observer.observe(closedCaptionsContainer, {\r\n            childList: true,\r\n            subtree: true,\r\n            characterData: true\r\n        });\r\n        \r\n        console.log(\"Observer set up, doing initial check...\");\r\n        this.captionCapture.debouncedCheckCaptions();\r\n        \r\n        // Set up a fallback timer to check periodically\r\n        this.stateManager.fallbackTimer = setInterval(() => {\r\n            console.log(\"Fallback timer check...\");\r\n            this.captionCapture.debouncedCheckCaptions();\r\n        }, TIMING.FALLBACK_TIMER_INTERVAL);\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Handle extension messages\r\n     */\r\n    handleMessage(request, sender, sendResponse) {\r\n        console.log(\"Content script received message:\", request);\r\n        \r\n        switch (request.message) {\r\n            case 'return_transcript':\r\n                console.log(\"return_transcript request received:\", this.captionCapture.transcriptArray);\r\n                \r\n                console.log(\"Attempting to capture recent captions before download...\");\r\n                this.stateManager.triggerSilenceDetection('download-request', this.captionCapture);\r\n                \r\n                if (!this.capturing || this.captionCapture.transcriptArray.length === 0) {\r\n                    alert(\"Oops! No captions were captured. Please make sure captions are turned on.\");\r\n                    sendResponse({success: false});\r\n                    return;\r\n                }\r\n\r\n                const orderedForDownload = this.captionCapture.sortTranscriptsByScreenOrder();\r\n                \r\n                const meetingTitle = document.title.replace(\"__Microsoft_Teams\", '').replace(/[^a-z0-9 ]/gi, '');\r\n                chrome.runtime.sendMessage({\r\n                    message: \"download_captions\",\r\n                    transcriptArray: orderedForDownload.map(({ID, ...rest}) => rest),\r\n                    meetingTitle: meetingTitle\r\n                });\r\n                sendResponse({success: true});\r\n                break;\r\n\r\n            case 'get_captions_for_viewing':\r\n                console.log(\"get_captions_for_viewing request received:\", this.captionCapture.transcriptArray);\r\n                \r\n                console.log(\"Attempting to capture recent captions before viewing...\");\r\n                this.stateManager.triggerSilenceDetection('view-request', this.captionCapture);\r\n                \r\n                if (!this.capturing || this.captionCapture.transcriptArray.length === 0) {\r\n                    alert(\"Oops! No captions were captured. Please make sure captions are turned on.\");\r\n                    sendResponse({success: false});\r\n                    return;\r\n                }\r\n\r\n                const orderedForViewing = this.captionCapture.sortTranscriptsByScreenOrder();\r\n                const viewableTranscripts = orderedForViewing.map(({ID, ...rest}) => rest);\r\n                \r\n                chrome.runtime.sendMessage({\r\n                    message: \"display_captions\",\r\n                    transcriptArray: viewableTranscripts\r\n                });\r\n                sendResponse({success: true});\r\n                break;\r\n\r\n            default:\r\n                sendResponse({success: false, error: \"Unknown message\"});\r\n                break;\r\n        }\r\n        \r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Initialize the entire system\r\n     */\r\n    initialize() {\r\n        console.log(\"Starting modular transcription system...\");\r\n        \r\n        // Initialize periodic checks\r\n        this.initializePeriodicChecks();\r\n        \r\n        // Start transcription\r\n        const startResult = this.startTranscription();\r\n        console.log(\"startTranscription returned:\", startResult);\r\n        \r\n        // Manual silence check for testing\r\n        setTimeout(() => {\r\n            console.log(\"MANUAL SILENCE CHECK - using centralized control\");\r\n            this.stateManager.triggerSilenceDetection('manual-test-check', this.captionCapture);\r\n        }, 10000);\r\n        \r\n        // Set up message listener\r\n        chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {\r\n            return this.handleMessage(request, sender, sendResponse);\r\n        });\r\n        \r\n        console.log(\"Modular content_script.js is running\");\r\n    }\r\n}\r\n\r\n// Initialize the system\r\nconst teamscaptionSaver = new TeamsaptionSaver();\r\nteamscaptionSaver.initialize();"],"names":["_constants","require","StateManager","constructor","processingState","isProcessing","isSilenceDetection","isForceCapture","lastSilenceDetectionReason","processingStats","runs","totalTime","throttledCalls","lastCaptionTime","lastProcessingTime","lastCaptionSnapshot","silenceCheckTimer","processingThrottle","fallbackTimer","setProcessingState","console","log","canStartProcessing","triggerSilenceDetection","reason","captionProcessor","setTimeout","TIMING","DEFER_RETRY_DELAY","originalTime","Date","now","SILENCE_TIMEOUT","result","checkRecentCaptions","error","cleanupAllTimers","clearTimeout","clearInterval","warn","exports","_domHelpers","MeetingDetector","meetingDetectionCache","timestamp","detectMeetingState","MEETING_CACHE_DURATION","quickIndicators","document","getElementById","SELECTORS","MEETING_INDICATORS","CALL_DURATION","slice","DOMHelpers","safeQuerySelector","CALL_STATUS_CONTAINER","CALL_STATUS","inMeeting","some","indicator","waitingSpans","safeQuerySelectorAll","Array","from","el","text","safeExtractText","includes","element","selector","querySelector","querySelectorAll","innerText","textContent","trim","safeClosest","closest","getCaptionElements","captionTextElements","PRIMARY_CAPTION","length","FALLBACK_CAPTIONS","extractCaptionData","textElement","name","rawText","transcript","CHAT_MESSAGE","authorElement","AUTHOR","fallbackSelectors","_textElement$parentEl","chatMessage","authorEl","parentElement","authorText","_textProcessing","CaptionCapture","stateManager","memoryManager","transcriptArray","transcriptIdCounter","processCaptionUpdate","captionData","elementIndex","trackingKey","previousData","captionElementTracking","get","previousText","similarity","TextProcessor","calculateTextSimilarity","isUpdate","SIMILARITY_THRESHOLDS","UPDATE_DETECTION","HIGH_SIMILARITY","toFixed","oldCaptionKey","createCaptionKey","processedCaptions","delete","oldIndex","findIndex","item","Name","Text","ID","splice","set","processed","isDuplicateCaption","captionKey","has","recentTranscripts","MEMORY","RECENT_TRANSCRIPTS_LIMIT","DUPLICATE_DETECTION","checkCaptions","currentSnapshot","map","join","MIN_CAPTIONS_REQUIRED","numStableElements","Math","max","STABILITY_BUFFER","i","normalizedText","normalizeText","shouldProcess","add","Time","toLocaleTimeString","newCaption","push","timeSinceLastCaption","SILENCE_TIMER_OFFSET","startIndex","endIndex","lastElement","lastText","match","debouncedCheckCaptions","timeSinceLastProcessing","DEBOUNCE_INTERVAL","startTime","performance","endTime","sortTranscriptsByScreenOrder","screenOrder","forEach","index","screenPosition","positionMap","Map","key","orderedTranscripts","sort","a","b","keyA","keyB","posA","posB","undefined","cleaned","replace","text1","text2","norm1","toLowerCase","norm2","shorter","longer","words1","split","filter","w","PERFORMANCE","MAX_WORD_LENGTH_FILTER","words2","commonWords","totalWords","normalizedName","MemoryManager","Set","cleanupMemory","removedTracking","data","entries","TRACKING_DATA_MAX_AGE","size","MAX_TRACKING_ENTRIES","toRemove","transcriptKeys","removedProcessed","MEMORY_CLEANUP_INTERVAL","FALLBACK_TIMER_INTERVAL","PERIODIC_CHECK_INTERVAL","PERFORMANCE_LOG_FREQUENCY","CAPTIONS_CONTAINER","_stateManager","_memoryManager","_captionCapture","_meetingDetector","TeamsaptionSaver","meetingDetector","captionCapture","capturing","observer","periodicCheckCounter","initializePeriodicChecks","setInterval","stats","avgProcessingTime","startTranscription","closedCaptionsContainer","disconnect","MutationObserver","mutations","observe","childList","subtree","characterData","handleMessage","request","sender","sendResponse","message","alert","success","orderedForDownload","meetingTitle","title","chrome","runtime","sendMessage","rest","orderedForViewing","viewableTranscripts","initialize","startResult","onMessage","addListener","teamscaptionSaver"],"sourceRoot":""}